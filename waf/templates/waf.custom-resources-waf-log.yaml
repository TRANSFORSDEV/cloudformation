AWSTemplateFormatVersion: "2010-09-09"
Description: 'waf automations'
Parameters:
  StackNumber:
    Description: 'Use to avoid conflicts when deploy various instances of this instance with the same name; <prefix>-[00 | 01 | 02 | ...]-<name>'
    Type: String
    Default: '00'
  # AppLogBucketStack:
  #   Description: ALB access log bucket
  #   Type: String
  #   Default: ''
  WafLogBucketStack:
    Description: Waf Log bucket
    Type: String
  LambdaLogLevel:
    Type: String
    AllowedValues: ['DEBUG', 'INFO','WARNING', 'ERROR','CRITICAL']
  WAFStack:
    Type: String
  EnvironmentStack:
    Type: String
  EndpointType:
    Type: String
    Default: 'CloudFront'
    AllowedValues:
      - 'CloudFront'
      - 'ALB'
      - 'APIGATEWAY'
    Description: Select the type of resource being used.
Conditions:
  ResourceEndpoint: !Or
    - !Equals
      - !Ref EndpointType
      - 'ALB'
    - !Equals
      - !Ref EndpointType
      - 'APIGATEWAY'
  # HasAppLogBucketStack: !Not [!Equals [!Ref AppLogBucketStack, '']]
  HasWafLogBucketStack: !Not [!Equals [!Ref WafLogBucketStack, '']]
Mappings:
  Solution:
    Data:
      SendAnonymousUsageData: 'Yes'
      LogLevel: 'INFO'
      SolutionID: 'SO0006'
      MetricsURL: 'https://metrics.awssolutionsbuilder.com/generic'
    Action:
      WAFWhitelistRule: 'ALLOW'
      WAFBlacklistRule: 'BLOCK'
      WAFSqlInjectionRule: 'BLOCK'
      WAFXssRule: 'BLOCK'
      WAFHttpFloodRateBasedRule: 'BLOCK'
      WAFHttpFloodRegularRule: 'BLOCK'
      WAFScannersProbesRule: 'BLOCK'
      WAFIPReputationListsRule: 'BLOCK'
      WAFBadBotRule: 'BLOCK'
    Athena:
      QueryScheduledRunTime: 5   # by default athena query runs every 5 minutes, update it if needed
Resources:

  ConfigWafLogging:
    Type: 'AWS::Lambda::Function'
    Properties:
      Description: >-
        This lambda function configures the Web ACL rules based on the features enabled in the
        CloudFormation template.
      FunctionName: !Sub
        - '${PREFIX}-LA-${StackNumber}-ConfigWafLogging'
        - PREFIX: !ImportValue
            'Fn::Sub': '${EnvironmentStack}-PrefixResourceName'
      Role: !GetAtt ConfigWafLoggingRole.Arn
      Code: ../output/configure-waf-logs
      Handler: 'configure-waf-logs.handler'
      Environment:
        Variables:
          LOG_LEVEL: INFO
      Runtime: python3.8
      MemorySize: 128
      Timeout: 30

  ConfigWafLoggingRole:
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: !Sub
        - '${PREFIX}-LA-${StackNumber}-ConfigWafLogging-Role'
        - PREFIX: !ImportValue
            'Fn::Sub': '${EnvironmentStack}-PrefixResourceName'
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /
      Policies:
        - PolicyName: WAFAccess
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - 'wafv2:GetWebACL'
                  - 'wafv2:UpdateWebACL'
                  - 'wafv2:PutLoggingConfiguration'
                  - 'wafv2:DeleteLoggingConfiguration'
                Resource:
                  - !ImportValue
                      'Fn::Sub': '${WAFStack}-WebACLArn'
        - PolicyName: WAFLogsAccess
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action: 'iam:CreateServiceLinkedRole'
                Resource:
                  - !Sub 'arn:${AWS::Partition}:iam::*:role/aws-service-role/wafv2.amazonaws.com/AWSServiceRoleForWAFV2Logging'
                Condition:
                  StringLike:
                    iam:AWSServiceName: 'wafv2.amazonaws.com'
        - PolicyName: !Sub
            - '${PREFIX}-LA-${StackNumber}-ConfigWafLogging-Role-Logs'
            - PREFIX: !ImportValue
                'Fn::Sub': '${EnvironmentStack}-PrefixResourceName'
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - "logs:CreateLogGroup"
                Resource:
                  - !Sub 'arn:aws:logs:${AWS::Region}:${AWS::AccountId}:*'
              - Effect: Allow
                Action:
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                Resource:
                  - !Sub
                    - 'arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/${PREFIX}-LA-${StackNumber}-ConfigWafLogging:*'
                    - PREFIX: !ImportValue
                        'Fn::Sub': '${EnvironmentStack}-PrefixResourceName'

Outputs:
  StackName:
    Description: Stack name.
    Value: !Sub '${AWS::StackName}'
    Export:
      Name: !Sub '${AWS::StackName}-StackName'
  ConfigureWafLoggingArn:
    Value: !GetAtt ConfigWafLogging.Arn
    Export:
      Name: !Sub '${AWS::StackName}-ConfigureWafLoggingArn'
#  ConfigureAppLogBucketArn:
#    Value: !GetAtt ConfigAppLogBucket.Arn
#    Export:
#      Name: !Sub '${AWS::StackName}-ConfigureAppLogBucketArn'