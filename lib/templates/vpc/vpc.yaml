AWSTemplateFormatVersion: 2010-09-09
Description: This template creates a Multi-AZ, multi-subnet VPC infrastructure with
  managed NAT gateways in the public subnet for each Availability Zone.
Parameters:
  StackNumber:
    Description: 'Use to avoid conflicts when deploy various instances of this instance with the same name; <prefix>-[00 | 01 | 02 | ...]-<name>'
    Type: String
    Default: '00'
  EnvironmentStack:
    Description: "Required the name of the environment Stack"
    Type: String
  AvailabilityZones:
    Description: 'List of Availability Zones to use for the subnets in the VPC. Note:
      The logical order is preserved.'
    Type: List<AWS::EC2::AvailabilityZone::Name>
  CreatePrivateSubnets:
    AllowedValues:
    - 'true'
    - 'false'
    Default: 'true'
    Description: Set to false to create only public subnets. If false, the CIDR parameters
      for ALL private subnets will be ignored.
    Type: String
  NumberOfAZs:
    AllowedValues:
    - '1'
    - '2'
    Default: '2'
    Description: Number of Availability Zones to use in the VPC. This must match your
      selections in the list of Availability Zones parameter.
    Type: String
  PrivateSubnet1ACIDR:
    AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/(1[6-9]|2[0-8]))$
    ConstraintDescription: CIDR block parameter must be in the form x.x.x.x/16-28
    Default: 10.0.1.0/24
    Description: CIDR block for private subnet 1A located in Availability Zone 1
    Type: String
  PrivateSubnet2ACIDR:
    AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/(1[6-9]|2[0-8]))$
    ConstraintDescription: CIDR block parameter must be in the form x.x.x.x/16-28
    Default: 10.0.2.0/24
    Description: CIDR block for private subnet 2A located in Availability Zone 2
    Type: String
  # PrivateSubnet3ACIDR:
  #   AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/(1[6-9]|2[0-8]))$
  #   ConstraintDescription: CIDR block parameter must be in the form x.x.x.x/16-28
  #   Default: 10.0.1.0/24
  #   Description: CIDR block for private subnet 1A located in Availability Zone 1
  #   Type: String
  # PrivateSubnet4ACIDR:
  #   AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/(1[6-9]|2[0-8]))$
  #   ConstraintDescription: CIDR block parameter must be in the form x.x.x.x/16-28
  #   Default: 10.0.2.0/24
  #   Description: CIDR block for private subnet 2A located in Availability Zone 2
  #   Type: String
  PublicSubnet1CIDR:
    AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/(1[6-9]|2[0-8]))$
    ConstraintDescription: CIDR block parameter must be in the form x.x.x.x/16-28
    Default: 10.0.3.0/24
    Description: CIDR block for the public DMZ subnet 1 located in Availability Zone 1
    Type: String
  PublicSubnet2CIDR:
    AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/(1[6-9]|2[0-8]))$
    ConstraintDescription: CIDR block parameter must be in the form x.x.x.x/16-28
    Default: 10.0.4.0/24
    Description: CIDR block for the public DMZ subnet 1 located in Availability Zone 1
    Type: String
  VPCCIDR:
    AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/(1[6-9]|2[0-8]))$
    ConstraintDescription: CIDR block parameter must be in the form x.x.x.x/16-28
    Default: 10.0.0.0/16
    Description: CIDR block for the VPC
    Type: String
  VPCTenancy:
    AllowedValues:
    - default
    - dedicated
    Default: default
    Description: The allowed tenancy of instances launched into the VPC
    Type: String
  CreateNatGateway:
    Default: 'YES'
    Description: Indicador NatGateway
    Type: String
    AllowedValues:
    - 'YES'
    - 'NO'
Conditions:
  2AZCondition:
    Fn::Equals:
    - Ref: NumberOfAZs
    - '2'
  CreateNatGatewayCondition:
    Fn::Equals:
    - Ref: CreateNatGateway
    - 'YES'
  NVirginiaRegionCondition:
    Fn::Equals:
    - Ref: AWS::Region
    - us-east-1
  PrivateSubnetsCondition:
    Fn::Equals:
    - Ref: CreatePrivateSubnets
    - 'true'
  PrivateSubnets&2AZCondition:
    Fn::And:
    - Condition: PrivateSubnetsCondition
    - Condition: 2AZCondition
  PrivateSubnets&CreateNatGatewayCondition:
    Fn::And:
    - Condition: PrivateSubnetsCondition
    - Condition: CreateNatGatewayCondition
Resources:
  DHCPOptions:
    Type: AWS::EC2::DHCPOptions
    Properties:
      DomainName:
        Fn::If:
        - NVirginiaRegionCondition
        - ec2.internal
        - Fn::Sub: ${AWS::Region}.compute.internal
      DomainNameServers:
      - AmazonProvidedDNS
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock:
        Ref: VPCCIDR
      InstanceTenancy:
        Ref: VPCTenancy
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
      - Key: Name
        Value:
          Ref: AWS::StackName
  VPCDHCPOptionsAssociation:
    Type: AWS::EC2::VPCDHCPOptionsAssociation
    Properties:
      VpcId:
        Ref: VPC
      DhcpOptionsId:
        Ref: DHCPOptions
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
      - Key: Name
        Value:
          Ref: AWS::StackName
  VPCGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId:
        Ref: VPC
      InternetGatewayId:
        Ref: InternetGateway
  PrivateSubnet1A:
    Condition: PrivateSubnetsCondition
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: VPC
      CidrBlock:
        Ref: PrivateSubnet1ACIDR
      AvailabilityZone:
        Fn::Select:
        - '0'
        - Ref: AvailabilityZones
      Tags:
      - Key: Name
        Value: Private subnet 1A
  PrivateSubnet2A:
    Condition: PrivateSubnets&2AZCondition
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: VPC
      CidrBlock:
        Ref: PrivateSubnet2ACIDR
      AvailabilityZone:
        Fn::Select:
        - '1'
        - Ref: AvailabilityZones
      Tags:
      - Key: Name
        Value: Private subnet 2B
  PrivateSubnet1ARouteTable:
    Condition: PrivateSubnetsCondition
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Ref: VPC
      Tags:
      - Key: Name
        Value: Private subnet 1A
      - Key: Network
        Value: Private
  PrivateSubnet1ARoute:
    Condition: PrivateSubnets&CreateNatGatewayCondition
    Type: AWS::EC2::Route
    Properties:
      RouteTableId:
        Ref: PrivateSubnet1ARouteTable
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId:
        Ref: NATGateway1
  PrivateSubnet1ARouteTableAssociation:
    Condition: PrivateSubnetsCondition
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId:
        Ref: PrivateSubnet1A
      RouteTableId:
        Ref: PrivateSubnet1ARouteTable
  PrivateSubnet2ARouteTableAssociation:
    Condition: PrivateSubnets&2AZCondition
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId:
        Ref: PrivateSubnet2A
      RouteTableId:
        Ref: PrivateSubnet1ARouteTable
  
  # PrivateSubnet3A:
  #   Condition: PrivateSubnetsCondition
  #   Type: AWS::EC2::Subnet
  #   Properties:
  #     VpcId:
  #       Ref: VPC
  #     CidrBlock:
  #       Ref: PrivateSubnet3ACIDR
  #     AvailabilityZone:
  #       Fn::Select:
  #       - '0'
  #       - Ref: AvailabilityZones
  #     Tags:
  #     - Key: Name
  #       Value: Private subnet 3A
  # PrivateSubnet4A:
  #   Condition: PrivateSubnets&2AZCondition
  #   Type: AWS::EC2::Subnet
  #   Properties:
  #     VpcId:
  #       Ref: VPC
  #     CidrBlock:
  #       Ref: PrivateSubnet4ACIDR
  #     AvailabilityZone:
  #       Fn::Select:
  #       - '1'
  #       - Ref: AvailabilityZones
  #     Tags:
  #     - Key: Name
  #       Value: Private subnet 4B
  # PrivateSubnet3ARouteTable:
  #   Condition: PrivateSubnetsCondition
  #   Type: AWS::EC2::RouteTable
  #   Properties:
  #     VpcId:
  #       Ref: VPC
  #     Tags:
  #     - Key: Name
  #       Value: Private subnet 3A
  #     - Key: Network
  #       Value: Private
  # PrivateSubnet3ARoute:
  #   Condition: PrivateSubnets&CreateNatGatewayCondition
  #   Type: AWS::EC2::Route
  #   Properties:
  #     RouteTableId:
  #       Ref: PrivateSubnet3ARouteTable
  #     DestinationCidrBlock: 0.0.0.0/0
  #     NatGatewayId:
  #       Ref: NATGateway1
  # PrivateSubnet3ARouteTableAssociation:
  #   Condition: PrivateSubnetsCondition
  #   Type: AWS::EC2::SubnetRouteTableAssociation
  #   Properties:
  #     SubnetId:
  #       Ref: PrivateSubnet3A
  #     RouteTableId:
  #       Ref: PrivateSubnet3ARouteTable
  # PrivateSubnet4ARouteTableAssociation:
  #   Condition: PrivateSubnets&2AZCondition
  #   Type: AWS::EC2::SubnetRouteTableAssociation
  #   Properties:
  #     SubnetId:
  #       Ref: PrivateSubnet4A
  #     RouteTableId:
  #       Ref: PrivateSubnet3ARouteTable
  
  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: VPC
      CidrBlock:
        Ref: PublicSubnet1CIDR
      AvailabilityZone:
        Fn::Select:
        - '0'
        - Ref: AvailabilityZones
      Tags:
      - Key: Name
        Value: Public subnet 1A
      MapPublicIpOnLaunch: true
  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: VPC
      CidrBlock:
        Ref: PublicSubnet2CIDR
      AvailabilityZone:
        Fn::Select:
        - '1'
        - Ref: AvailabilityZones
      Tags:
      - Key: Name
        Value: Public subnet 2B
      MapPublicIpOnLaunch: true
  PublicSubnetRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Ref: VPC
      Tags:
      - Key: Name
        Value: Public Subnets
      - Key: Network
        Value: Public
  PublicSubnetRoute:
    DependsOn: VPCGatewayAttachment
    Type: AWS::EC2::Route
    Properties:
      RouteTableId:
        Ref: PublicSubnetRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId:
        Ref: InternetGateway
  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId:
        Ref: PublicSubnet1
      RouteTableId:
        Ref: PublicSubnetRouteTable
  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId:
        Ref: PublicSubnet2
      RouteTableId:
        Ref: PublicSubnetRouteTable
  NATGateway1:
    Condition: PrivateSubnets&CreateNatGatewayCondition
    DependsOn: VPCGatewayAttachment
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId:
        Fn::GetAtt:
          - "NATGateway1ElasticIP"
          - "AllocationId"
      SubnetId:
        Ref: PublicSubnet1
      Tags:
        - Key: "Name"
          Value: !Sub
            - '${PREFIX}-NAT-${StackNumber}'
            - PREFIX: !ImportValue
                'Fn::Sub': '${EnvironmentStack}-PrefixResourceName'
  NATGateway1ElasticIP:
    Condition: PrivateSubnets&CreateNatGatewayCondition
    Type: "AWS::EC2::EIP"
    Properties:
      Domain: "vpc"
      Tags:
        - Key: "Name"
          Value: !Sub
            - '${PREFIX}-EIP-${StackNumber}-NATEIP'
            - PREFIX: !ImportValue
                'Fn::Sub': '${EnvironmentStack}-PrefixResourceName'
Outputs:
  StackName:
    Description: Stack name.
    Value:
      Fn::Sub: ${AWS::StackName}
  PrivateSubnet1ACIDR:
    Condition: PrivateSubnetsCondition
    Description: Private subnet 1A CIDR in Availability Zone 1
    Value:
      Ref: PrivateSubnet1ACIDR
    Export:
      Name:
        Fn::Sub: ${AWS::StackName}-PrivateSubnet1ACIDR
  PrivateSubnet1AID:
    Condition: PrivateSubnetsCondition
    Description: Private subnet 1A ID in Availability Zone 1
    Value:
      Ref: PrivateSubnet1A
    Export:
      Name:
        Fn::Sub: ${AWS::StackName}-PrivateSubnet1AID
  PrivateSubnet2ACIDR:
    Condition: PrivateSubnets&2AZCondition
    Description: Private subnet 2A CIDR in Availability Zone 2
    Value:
      Ref: PrivateSubnet2ACIDR
    Export:
      Name:
        Fn::Sub: ${AWS::StackName}-PrivateSubnet2ACIDR
  PrivateSubnet2AID:
    Condition: PrivateSubnets&2AZCondition
    Description: Private subnet 2A ID in Availability Zone 2
    Value:
      Ref: PrivateSubnet2A
    Export:
      Name:
        Fn::Sub: ${AWS::StackName}-PrivateSubnet2AID
  # PrivateSubnet3ACIDR:
  #   Condition: PrivateSubnetsCondition
  #   Description: Private subnet 1A CIDR in Availability Zone 1
  #   Value:
  #     Ref: PrivateSubnet3ACIDR
  #   Export:
  #     Name:
  #       Fn::Sub: ${AWS::StackName}-PrivateSubnet3ACIDR
  # PrivateSubnet3AID:
  #   Condition: PrivateSubnetsCondition
  #   Description: Private subnet 3A ID in Availability Zone 1
  #   Value:
  #     Ref: PrivateSubnet3A
  #   Export:
  #     Name:
  #       Fn::Sub: ${AWS::StackName}-PrivateSubnet3AID
  # PrivateSubnet4ACIDR:
  #   Condition: PrivateSubnets&2AZCondition
  #   Description: Private subnet 2A CIDR in Availability Zone 2
  #   Value:
  #     Ref: PrivateSubnet4ACIDR
  #   Export:
  #     Name:
  #       Fn::Sub: ${AWS::StackName}-PrivateSubnet4ACIDR
  # PrivateSubnet4AID:
  #   Condition: PrivateSubnets&2AZCondition
  #   Description: Private subnet 4A ID in Availability Zone 2
  #   Value:
  #     Ref: PrivateSubnet4A
  #   Export:
  #     Name:
  #       Fn::Sub: ${AWS::StackName}-PrivateSubnet4AID
  PublicSubnet1CIDR:
    Description: Public subnet 1 CIDR in Availability Zone 1
    Value:
      Ref: PublicSubnet1CIDR
    Export:
      Name:
        Fn::Sub: ${AWS::StackName}-PublicSubnet1CIDR
  PublicSubnet1ID:
    Description: Public subnet 1 ID in Availability Zone 1
    Value:
      Ref: PublicSubnet1
    Export:
      Name:
        Fn::Sub: ${AWS::StackName}-PublicSubnet1ID
  PublicSubnet2ID:
    Description: Public subnet 2 ID in Availability Zone 2
    Value:
      Ref: PublicSubnet2
    Export:
      Name:
        Fn::Sub: ${AWS::StackName}-PublicSubnet2
  PrivateSubnet1ARouteTable:
    Condition: PrivateSubnetsCondition
    Value:
      Ref: PrivateSubnet1ARouteTable
    Description: Private subnet 1A route table
    Export:
      Name:
        Fn::Sub: ${AWS::StackName}-PrivateSubnet1ARouteTable
  PublicSubnetRouteTable:
    Value:
      Ref: PublicSubnetRouteTable
    Description: Public subnet route table
    Export:
      Name:
        Fn::Sub: ${AWS::StackName}-PublicSubnetRouteTable
  VPCCIDR:
    Value:
      Ref: VPCCIDR
    Description: VPC CIDR
    Export:
      Name:
        Fn::Sub: ${AWS::StackName}-VPCCIDR
  VPCID:
    Value:
      Ref: VPC
    Description: VPC ID
    Export:
      Name:
        Fn::Sub: ${AWS::StackName}-VPCID
  SubnetsPublic:
    Value:
      Fn::Join:
      - ','
      - - Ref: PublicSubnet1
        - Ref: PublicSubnet2
    Description: SubnetsPublic
    Export:
      Name:
        Fn::Sub: ${AWS::StackName}-SubnetsPublic
  SubnetsApp:
    Value:
      Fn::Join:
      - ','
      - - Ref: PrivateSubnet1A
        - Ref: PrivateSubnet2A
    Description: SubnetsApp
    Export:
      Name:
        Fn::Sub: ${AWS::StackName}-SubnetsApp
  # SubnetsDB:
  #   Value:
  #     Fn::Join:
  #     - ','
  #     - - Ref: PrivateSubnet3A
  #       - Ref: PrivateSubnet4A
  #   Description: SubnetsDB
  #   Export:
  #     Name:
  #       Fn::Sub: ${AWS::StackName}-SubnetsDB
